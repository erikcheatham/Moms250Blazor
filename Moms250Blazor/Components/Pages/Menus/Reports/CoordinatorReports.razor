@page "/CoordinatorReports"

<PageTitle>SeniorCoordinatorReports</PageTitle>

@inject IAssignmentsRepo ar
@inject IExceptionLogRepo eLog
@inject IUsersRepo ur
@inject IStatesRepo sr
@inject IJSRuntime jsRuntime

<div class="container-fluid">

    @if (!loadComplete)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row mt-2 text-center">
            <div class="form-group col-sm-2"></div>
            <div class="form-group col-sm-8">
                @if (reportType == CoordinatorReportType.assignmentsAToZ.ToString())
                {
                    <h1>Assignments by applicant name in alphabetical order</h1>
                }
                else if (reportType == CoordinatorReportType.assignmentsByAgeBasedOnDateAssigned.ToString())
                {
                    <h1>Assignments most recently assigned</h1>
                }
                else if (reportType == CoordinatorReportType.assignmentsByStateThenAToZ.ToString())
                {
                    <h1>Assignments by applicant state then by applicant name in alphabetical order</h1>
                    <div class="mt-2 w-100">
                        <div class="w-50 float-start">
                            <label class="fw-bold w-100 text-start" for="applicantStateList">Applicant State List</label>
                            <select class="form-select" id="applicantStateList" name="applicantStateList" @onchange="(e) => UpdateReportByApplicantState(e.Value?.ToString())">
                                <option value="">All Applicant States</option>
                                @foreach (var s in applicantStateList ?? new List<MyListItems>())
                                {
                                    @if (selectedApplicantState == s.S)
                                    {
                                        <option selected value="@s.S">@s.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@s.S">@s.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="w-50 float-end">
                            <label class="fw-bold w-100 text-start" for="applicantFullNameList">Applicant Full Name List</label>
                            <select class="form-select" id="applicantFullNameList" name="applicantFullNameList" @onchange="(e) => UpdateReportByApplicantFullName(e.Value?.ToString())">
                                <option value="">All Applicants</option>
                                @foreach (var s in applicantFullNameList ?? new List<MyListItems>())
                                {
                                    @if (selectedApplicantFullName == s.S)
                                    {
                                        <option selected value="@s.S">@s.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@s.S">@s.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                }
                else if (reportType == CoordinatorReportType.assignmentsByTypeThenStatus.ToString())
                {
                    <h1>Assignments by application type then by application status</h1>
                    <div class="mt-2 w-100">
                        <div class="w-50 float-start">
                            <label class="fw-bold w-100 text-start" for="applicantTypeList">Application Type List</label>
                            <select class="form-select" id="applicantTypeList" name="applicantTypeList" @onchange="(e) => UpdateReportByApplicantType(e.Value?.ToString())">
                                <option value="">All Applicaiton Types</option>
                                @foreach (var v in applicantTypeList ?? new List<MyListItems>())
                                {
                                    @if (selectedApplicantType == v.S)
                                    {
                                        <option selected value="@v.S">@v.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@v.S">@v.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="w-50 float-end">
                            <label class="fw-bold w-100 text-start" for="applicantStatusList">Application Status List</label>
                            <select class="form-select" id="applicantStatusList" name="applicantStatusList" @onchange="(e) => UpdateReportByApplicantStatus(e.Value?.ToString())">
                                <option value="">All Application Status Types</option>
                                @foreach (var s in applicantStatusList ?? new List<MyListItems>())
                                {
                                    @if (selectedApplicantStatus == s.S)
                                    {
                                        <option selected value="@s.S">@s.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@s.S">@s.Text</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                }
                else if (reportType == CoordinatorReportType.assignmentsByMailed.ToString())
                {
                    <h1>Assignments most recently completed or mailed</h1>
                }
                else if (reportType == CoordinatorReportType.assignmentsByLeadVolunteer.ToString())
                {
                    <h1>Assignments by all lead volunteers</h1>
                    <div class="mt-2 w-100">
                        <label class="fw-bold w-100 text-start" for="volunteerList">Volunteer</label>
                        <select class="form-select" id="volunteerList" name="volunteerList" @onchange="(e) => UpdateReportByVolunteer(e.Value?.ToString())">
                            <option value="">All Lead Volunteers</option>
                            @foreach (var v in volunteerList ?? new List<MyListItems>())
                            {
                                @if (selectedVolunteer == v.I)
                                {
                                    <option selected value="@v.I">@v.Text</option>
                                }
                                else
                                {
                                    <option value="@v.I">@v.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (reportType == CoordinatorReportType.assignmentsByVolunteer.ToString())
                {
                    <h1>Assignments by all volunteers</h1>
                    <div class="mt-2 w-100">
                        <label class="fw-bold w-100 text-start" for="volunteerList">Volunteer</label>
                        <select class="form-select" id="volunteerList" name="volunteerList" @onchange="(e) => UpdateReportByVolunteer(e.Value?.ToString())">
                            <option value="">All Volunteers</option>
                            @foreach (var v in volunteerList ?? new List<MyListItems>())
                            {
                                @if (selectedVolunteer == v.I)
                                {
                                    <option selected value="@v.I">@v.Text</option>
                                }
                                else
                                {
                                    <option value="@v.I">@v.Text</option>
                                }
                            }
                        </select>
                    </div>
                }
                else if (reportType == CoordinatorReportType.assignmentsByLastUpdate.ToString())
                {
                    <h1>Assignments most recently changed</h1>
                }
                else if (reportType == CoordinatorReportType.assignmentsByMyVolunteers.ToString())
                {
                    <h1>All of my volunteers's assignments</h1>
                }
                else if (reportType == CoordinatorReportType.assignmentsByChapterContactList.ToString())
                {
                    <h1>Assignments by most recent contact with chapter date</h1>
                }
            </div>
            <div class="form-group col-sm-2"></div>
        </div>

        <br />
        <br />
        <button class="form-control fs-5 btn-success fw-bold mb-4 me-2 w-25" id="ExportXLS" name="ExportXLS" @onclick="@ExportAssignments" disabled="@isExporting">Export To Excel</button>
        <RadzenDataGrid AllowColumnPicking="true" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSizeChanged="@(args => SavePageSizePref(args))"
                        PageSize="@thisUser.RadzenDataGridPageSizePref" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true" class="radzenGridSizer" PageSizeOptions="@pageSizeOptions"
                        RowSelect="(e => OpenAssignment(e.Id))" Data="@ass" TItem="Assignment" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Assignment" Property="Id" Filterable="false" Title="Id" Visible="false" Width="80px" TextAlign="TextAlign.Center" />
                @* <RadzenDataGridColumn TItem="Assignment" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
            <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
            </Template>
            </RadzenDataGridColumn> *@
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicantFullName" Title="Applicant" Width="200px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicantFname" Title="First Name" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicantLname" Title="Last Name" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicantState" Title="State" Width="125px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicantChapter" Title="Chapter" Width="200px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicationType" Title="Type" Width="125px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicationStatus" Title="Status" Width="125px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ApplicationDateAssigned" Title="Date Assigned" FormatString="{0:d}" Width="175px" /> @* Date Assigned *@
                <RadzenDataGridColumn TItem="Assignment" Property="ChapterContact" Title="Chapter Contact" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Registrar" Title="Registrar" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="ChapterContactEmail" Title="Chapter Contact Email" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="VerifyingGenie" Title="VerifyingGenie" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="FirstReview" Title="First Review" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="DateOfLastAirletter" Title="Date of Last AIR" FormatString="{0:d}" Width="175px" />
                <RadzenDataGridColumn TItem="Assignment" Property="ResponseDate" Title="Response Date" FormatString="{0:d}" Width="200px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="DateComplete" Title="Date Mailed" FormatString="{0:d}" Width="175px" /> @* Date Sent/Mailed *@
                <RadzenDataGridColumn TItem="Assignment" Property="NcupdateRequested" Title="NC Update Requested" FormatString="{0:d}" Width="200px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="LeadVolunteers" Title="Lead Volunteers" Width="400px" />
                <RadzenDataGridColumn TItem="Assignment" Property="VolunteerState" Title="Vol State" Width="150px" />
                <RadzenDataGridColumn TItem="Assignment" Property="VolunteerFullNames" Title="Volunteers" Width="400px" />
                <RadzenDataGridColumn TItem="Assignment" Property="HelpRequest" Title="Help Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="ReassignmentRequest" Title="Reassignment Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="HelpRequest" Title="Help Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Aaarequest" Title="AAA Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Artrequest" Title="ART Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="SeniorCoordinatorRequest" Title="Senior Coordinator Request" Width="200px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="CoordinatorRequest" Title="Coordinator Request" Width="200px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="ReturnRequest" Title="Return Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="DocReceived" Title="Doc Received" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="PermissionLetter" Title="Permission Letter" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="SeniorCoordinatorRequest" Title="Senior Coordinator Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="SelectedCoordinator" Title="Selected Coordinator" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="StateProblem" Title="State Problem" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Notes" Title="Notes" Width="300px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="LastContactWithChapterDate" Title="Last Contact With Chapter Date" FormatString="{0:d}" Width="200px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="MemberInitials" Title="Member Initials" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="VolunteerContactChapter" Title="Volunteer Contact Chapter" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="SpecialTeamRequest" Title="Special Team Request" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="PatriotNumber" Title="Patriot Number" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="PatriotName" Title="Patriot Name" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="NewChildOfPatriot" Title="New Child of Patriot" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="NewPatriot" Title="New Patriot" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Correction" Title="Correction" Width="160px" Visible="false" />
                <RadzenDataGridColumn TItem="Assignment" Property="Created" Title="Created" FormatString="{0:d}" Width="200px" />
                <RadzenDataGridColumn TItem="Assignment" Property="CreatedBy" Title="CreatedBy" Width="160px" />
                <RadzenDataGridColumn TItem="Assignment" Property="Modified" Title="Date Modified" FormatString="{0:d}" Width="175px" /> @* Date Modified *@
                <RadzenDataGridColumn TItem="Assignment" Property="ModifiedBy" Title="Modified By" Width="150px" />
            </Columns>
        </RadzenDataGrid>
    }
    @* <div style="min-height: 300px">&nbsp;</div> *@
    @* <Footer /> *@
</div>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "ReportType")]
    public string reportType { get; set; } = "";

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; } = null!;
    public string userName { get; set; } = "";
    public string userFullName { get; set; } = "";

    public bool loadComplete { get; set; } = false;
    public bool isExporting { get; set; } = false;

    List<Assignment> ass = new List<Assignment>();
    List<MyListItems> applicantFullNameList = new List<MyListItems>();
    List<MyListItems> applicantStateList = new List<MyListItems>();
    List<MyListItems> applicantTypeList = new List<MyListItems>();
    List<MyListItems> applicantStatusList = new List<MyListItems>();
    List<MyListItems> volunteerList = new List<MyListItems>();

    ApplicationUser thisUser = new ApplicationUser();

    CoordinatorReportType rpt;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 15, 20, 25, 30, 35, 40, 45, 50 };
    bool showApplicantFullNameList = false;
    bool showApplicantStateList = false;
    bool showApplicantTypeList = false;
    bool showApplicantStatusList = false;
    bool showVolunteerList = false;

    bool LeadVolunteers = false;

    string selectedApplicantFullName = "";
    string selectedApplicantDateAssigned = "";
    string selectedApplicantState = "";
    string selectedApplicantType = "";
    string selectedApplicantStatus = "";
    int selectedVolunteer = 0; //UserDataId
    string selectedManager = ""; //ManagerId (AspNetUserId) on UserData Table
    string selectedLastModifiedDate = "";

    protected override async Task OnInitializedAsync()
    {
        //await GetAssignmentAsync();
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            base.OnInitialized();
            var user = (await AuthStat).User;
            if (user?.Identity?.IsAuthenticated ?? false)
            {
                userName = user?.Identity?.Name ?? "";
                await GetApplicationUser();
                userFullName = thisUser.FullName ?? "";
            }

            // 8 Selections
            // ApplicantFullName
            // ApplicantDateAssigned
            // ApplicantState - ApplicantFullName
            // AppType - AppStatus
            // FullName Lead Volunteer
            // FullName Volunteer
            // LastModifiedDate
            // LastContactWithChapterDate

            await ReloadGrid();
        }
        await Task.CompletedTask;
    }

    async Task GetApplicationUser()
    {
        thisUser = await ur.GetApplicationUserByUsernameAsync(userName ?? "");
        selectedManager = thisUser.Id;
    }

    async Task SavePageSizePref(int t)
    {
        if (t > 0 && thisUser.RadzenDataGridPageSizePref != t)
        {
            thisUser.RadzenDataGridPageSizePref = t;
            var result = await ur.UpdateApplicationUserAsync(thisUser);
            if (result)
            {
                //await ReloadGrid();
            }
        }
    }

    async Task ReloadGrid()
    {
        if (reportType == CoordinatorReportType.assignmentsAToZ.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsAToZ);
        }
        else if (reportType == CoordinatorReportType.assignmentsByAgeBasedOnDateAssigned.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByAgeBasedOnDateAssigned);
        }
        else if (reportType == CoordinatorReportType.assignmentsByStateThenAToZ.ToString())
        {
            showApplicantFullNameList = true;
            showApplicantStateList = true;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            await GetApplicantStatesAsync();
            await GetApplicantFullNamesAsync();
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByStateThenAToZ, selectedApplicantState, selectedApplicantFullName);
        }
        else if (reportType == CoordinatorReportType.assignmentsByTypeThenStatus.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = true;
            showApplicantStatusList = true;
            showVolunteerList = false;
            LeadVolunteers = false;
            await GetApplicantTypesAsync();
            await GetApplicantStatusesAsync();
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByTypeThenStatus, selectedApplicantType, selectedApplicantStatus);
        }
        else if (reportType == CoordinatorReportType.assignmentsByMailed.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByMailed);
        }
        else if (reportType == CoordinatorReportType.assignmentsByLeadVolunteer.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = true;
            LeadVolunteers = true;
            await GetAllLeadVolunteersAsync();
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByLeadVolunteer, "", "", selectedVolunteer);
        }
        else if (reportType == CoordinatorReportType.assignmentsByVolunteer.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = true;
            LeadVolunteers = false;
            await GetAllVolunteersAsync();
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByVolunteer, "", "", selectedVolunteer);
        }
        else if (reportType == CoordinatorReportType.assignmentsByLastUpdate.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByLastUpdate);
        }
        else if (reportType == CoordinatorReportType.assignmentsByMyVolunteers.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            if (!string.IsNullOrEmpty(selectedManager)) //ManagerId (AspNetUserId) on UserData Table
                ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByMyVolunteers, selectedManager);
        }
        else if (reportType == CoordinatorReportType.assignmentsByChapterContactList.ToString())
        {
            showApplicantFullNameList = false;
            showApplicantStateList = false;
            showApplicantTypeList = false;
            showApplicantStatusList = false;
            showVolunteerList = false;
            LeadVolunteers = false;
            ass = await ar.GetCoordinatorReportListAssignmentsAsync(CoordinatorReportType.assignmentsByChapterContactList);
        }
        loadComplete = true;
        StateHasChanged();
    }

    async Task UpdateReportByApplicantFullName(string? val)
    {
        selectedApplicantFullName = val ?? "";
        await ReloadGrid();
    }

    async Task UpdateReportByApplicantState(string? val)
    {
        selectedApplicantState = val ?? "";
        await ReloadGrid();
    }

    async Task UpdateReportByApplicantType(string? val)
    {
        selectedApplicantType = val ?? "";
        await ReloadGrid();
    }

    async Task UpdateReportByApplicantStatus(string? val)
    {
        selectedApplicantStatus = val ?? "";
        await ReloadGrid();
    }

    async Task UpdateReportByVolunteer(string? val)
    {
        selectedVolunteer = 0;
        if (!string.IsNullOrEmpty(val))
            selectedVolunteer = int.Parse(val);

        await ReloadGrid();
    }

    async Task GetApplicantFullNamesAsync()
    {
        applicantFullNameList = await ar.GetMyListItemsApplicantFullNamesAsync();
    }

    async Task GetApplicantStatesAsync()
    {
        applicantStateList = await sr.GetMyListItemsStatesAsync();
    }

    async Task GetApplicantTypesAsync()
    {
        applicantTypeList = await ar.GetMyListItemsApplicantTypeAsync();
    }

    async Task GetApplicantStatusesAsync()
    {
        applicantStatusList = await ar.GetMyListItemsApplicantStatusAsync();
    }

    async Task GetAllLeadVolunteersAsync()
    {
        volunteerList = await ur.GetMyListItemsAllUsersAsync(MyUserListItemsType.FullNameAsSelectorLeadVolunteersOnly);
    }

    async Task GetAllVolunteersAsync()
    {
        volunteerList = await ur.GetMyListItemsAllUsersAsync(MyUserListItemsType.FullNameAsSelector);
    }

    async void OpenAssignment(int i)
    {
        try
        {
            await jsRuntime.InvokeAsync<object>("open", $"{ContextSettings.WebSiteURL}/AnyAssignment?ID={i}", "_blank");
        }
        catch (Exception ex)
        {
            Data.ExceptionLog el = new Data.ExceptionLog()
                {
                    Message = ex.Message,
                    StackTrace = ex.StackTrace
                };
            await eLog.AddExceptionLogAsync(el, userFullName ?? "System");
            var msg = $"The following Error occured: {ex?.ToString()}";
        }
    }

    async Task ExportAssignments()
    {
        try
        {
            var fileName = $"{reportType}_{DateTime.Now.ToString("yyyy-dd-MM_hh_mm_ss")}.xlsx";

            using var workbook = new XLWorkbook();
            var dataTable = DataHelper.CreateAssignmentDataTable(ass);

            var worksheet = workbook.Worksheets.Add(dataTable, "Assignments");
            //worksheet.RangeUsed().SetAutoFilter();
            worksheet.Columns().AdjustToContents();

            using var memoryStream = new MemoryStream();
            workbook.SaveAs(memoryStream);
            memoryStream.Position = 0;

            using var streamRef = new DotNetStreamReference(stream: new MemoryStream(memoryStream.ToArray()));
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            Data.ExceptionLog el = new Data.ExceptionLog()
                {
                    Message = ex.Message,
                    StackTrace = ex.StackTrace
                };
            await eLog.AddExceptionLogAsync(el, userFullName ?? "System");
        }
    }
}
